var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TreeWidthSolver","category":"page"},{"location":"#TreeWidthSolver","page":"Home","title":"TreeWidthSolver","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TreeWidthSolver.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TreeWidthSolver]","category":"page"},{"location":"#TreeWidthSolver.MaskedBitGraph","page":"Home","title":"TreeWidthSolver.MaskedBitGraph","text":"mutable struct MaskedBitGraph{INT}\n\nA mutable struct representing a masked bit graph.\n\nFields\n\nMaskedBitGraph::Vector{INT}: Stores the adjacency matrix as a vector of BitStr.\nfadjlist::Vector{Vector{Int}}: Stores the adjacency list, providing information about the sparse graph.\nmask::INT: The mask for the graph.\n\n\n\n\n\n","category":"type"},{"location":"#TreeWidthSolver.decomposition_tree-Union{Tuple{Graphs.SimpleGraphs.SimpleGraph{TG}}, Tuple{TL}, Tuple{TW}, Tuple{TG}} where {TG, TW, TL}","page":"Home","title":"TreeWidthSolver.decomposition_tree","text":"decomposition_tree(g::SimpleGraph{TG}; labels::Vector{TL} = collect(1:nv(g)), weights::Vector{TW} = ones(nv(g)), verbose::Bool = false) where {TG, TW, TL}\n\nConstructs a decomposition tree for a given simple graph g.\n\nArguments\n\ng::SimpleGraph{TG}: The input graph.\nlabels::Vector{TL}: (optional) The labels for the vertices of the graph. Default is collect(1:nv(g)).\nweights::Vector{TW}: (optional) The weights for the vertices of the graph. Default is ones(nv(g)).\nverbose::Bool: (optional) Whether to print verbose output. Default is false.\n\nReturns\n\nTreeDecomposition: The resulting decomposition tree, where treewidht is stored in td.tw and the tree is stored in td.tree.\n\n\n\n\n\n","category":"method"},{"location":"#TreeWidthSolver.elimination_order-Union{Tuple{Graphs.SimpleGraphs.SimpleGraph{TG}}, Tuple{TW}, Tuple{TL}, Tuple{TG}} where {TG, TL, TW}","page":"Home","title":"TreeWidthSolver.elimination_order","text":"elimination_order(g::SimpleGraph{TG}; labels::Vector{TL} = collect(1:nv(g)), weights::Vector{TW} = ones(nv(g)), verbose::Bool = false) where {TG, TL, TW}\n\nCompute the elimination order of a graph g using the BT algorithm.\n\nArguments\n\ng::SimpleGraph{TG}: The input graph.\nlabels::Vector{TL}: (optional) Labels for the vertices of g. Default is collect(1:nv(g)).\nweights::Vector{TW}: (optional) Weights for the vertices of g. Default is ones(nv(g)).\nverbose::Bool: (optional) Whether to print verbose output. Default is false.\n\nReturns\n\nlabeled_eo::Vector{Vector{TL}}: The elimination order of the graph g, where each vertex is labeled according to labels.\n\n\n\n\n\n","category":"method"},{"location":"#TreeWidthSolver.exact_treewidth-Union{Tuple{Graphs.SimpleGraphs.SimpleGraph{TG}}, Tuple{TW}, Tuple{TG}} where {TG, TW}","page":"Home","title":"TreeWidthSolver.exact_treewidth","text":"exact_treewidth(g::SimpleGraph{TG}; weights::Vector{TW} = ones(nv(g)), verbose::Bool = false) where {TG, TW}\n\nCompute the exact treewidth of a given graph g using the BT algorithm.\n\nArguments\n\ng::SimpleGraph{TG}: The input graph.\nweights::Vector{TW} = ones(nv(g)): The weights of the vertices in the graph. Default is equal weights for all vertices.\nverbose::Bool = false: Whether to print verbose output. Default is false.\n\nReturns\n\ntw: The treewidth of the graph.\n\n\n\n\n\n","category":"method"},{"location":"#TreeWidthSolver.graph_from_gr-Tuple{Any}","page":"Home","title":"TreeWidthSolver.graph_from_gr","text":"graph_from_gr(filename)\n\nReads a graph from a file in the .gr format (PACE format) and returns a SimpleGraph object.\n\nArguments\n\nfilename: The path to the input file.\n\nReturns\n\ngraph: A SimpleGraph object representing the graph.\n\n\n\n\n\n","category":"method"},{"location":"#TreeWidthSolver.line_graph-Tuple{SparseArrays.SparseMatrixCSC}","page":"Home","title":"TreeWidthSolver.line_graph","text":"line_graph(adjacency_mat::SparseMatrixCSC)\n\nConstructs the line graph of a given graph represented by its adjacency matrix.\n\nArguments\n\nadjacency_mat::SparseMatrixCSC: The adjacency matrix of the input graph, where the columns represent the vertices and the rows represent the edges. The value is true if the edge is connected to the vertex.\n\nReturns\n\ng::SimpleGraph: The line graph of the input graph.\n\n\n\n\n\n","category":"method"},{"location":"#TreeWidthSolver.save_graph-Tuple{Graphs.SimpleGraphs.SimpleGraph, Any}","page":"Home","title":"TreeWidthSolver.save_graph","text":"function save_graph(g::SimpleGraph, filename)\n\nThe graph will be saved as .gr format, in PACE format, where the first line is p tw nv ne, and the following lines are the edges src dst\n\n\n\n\n\n","category":"method"},{"location":"#TreeWidthSolver.simple_graph-Tuple{SparseArrays.SparseMatrixCSC}","page":"Home","title":"TreeWidthSolver.simple_graph","text":"simple_graph(adjacency_mat::SparseMatrixCSC)\n\nConstructs a simple undirected graph from a sparse adjacency matrix.\n\nArguments\n\nadjacency_mat::SparseMatrixCSC: The sparse adjacency matrix representing the graph.\n\nReturns\n\ng::SimpleGraph: The constructed simple undirected graph.\n\n\n\n\n\n","category":"method"}]
}
